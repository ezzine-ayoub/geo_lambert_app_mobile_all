import React, { createContext, useContext, useEffect, useState, ReactNode, useCallback } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { authService, AuthUser, AuthResponse } from '../services/authService';

// ==================== INTERFACES ====================

interface UserAuthData {
  success: boolean;
  user_info: AuthUser;
  CREDENTIALS: {
    username: string;
    password: string;
  };
  db: string;
  timestamp: number;
  isAuthenticated: boolean;
}

interface UserAuthContextType {
  userAuth: UserAuthData | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  
  // Actions
  login: (username: string, password: string, db?: string) => Promise<boolean>;
  logout: () => Promise<void>;
  refreshSession: () => Promise<void>;
  clearError: () => void;
  
  // Getters
  getCurrentUser: () => AuthUser | null;
  getCredentials: () => { username: string; password: string; db: string } | null;
  
  // √âtats
  sessionValid: boolean;
}

// ==================== CONTEXT ====================

const UserAuthContext = createContext<UserAuthContextType | undefined>(undefined);

interface UserAuthProviderProps {
  children: ReactNode;
}

export function UserAuthProvider({ children }: UserAuthProviderProps) {
  const [userAuth, setUserAuth] = useState<UserAuthData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [sessionValid, setSessionValid] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ‚úÖ CORRECTION: useCallback pour √©viter les re-renders excessifs
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // ‚úÖ CORRECTION: Fonction utilitaire pour g√©rer les erreurs
  const handleError = useCallback((error: any, context: string) => {
    console.error(`‚ùå [UserAuth] Erreur ${context}:`, error);
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
    setError(`${context}: ${errorMessage}`);
  }, []);

  // üîÑ V√©rifier l'authentification au d√©marrage
  useEffect(() => {
    let isMounted = true;
    
    const checkAuthStatus = async () => {
      try {
        console.log('üîç [UserAuth] V√©rification du statut d\'authentification...');
        setIsLoading(true);
        setError(null);

        
        // V√©rifier si une session est active
        const isAuth = await authService.isAuthenticated();
        const isValid = await authService.isSessionValid();
        
        console.log('üîç [UserAuth] √âtat authentification:', { isAuth, isValid });
        
        if (!isMounted) return;

        if (isAuth && isValid) {
          try {
            // R√©cup√©rer les donn√©es de session
            const authData = await authService.getStoredAuthData();
            const credentials = await authService.getStoredCredentials();
            
            console.log('üîç [UserAuth] Donn√©es r√©cup√©r√©es:', { 
              hasAuthData: !!authData, 
              hasCredentials: !!credentials,
              authSuccess: authData?.success,
              userDisplay: authData?.user_info?.display_name
            });
            
            if (authData && credentials && authData.success && isMounted) {
              const userData: UserAuthData = {
                success: authData.success,
                user_info: authData.user_info,
                CREDENTIALS: {
                  username: credentials.username,
                  password: credentials.password
                },
                db: credentials.db,
                timestamp: Date.now(),
                isAuthenticated: true
              };

              setUserAuth(userData);
              setSessionValid(true);
              console.log(`‚úÖ [UserAuth] Session restaur√©e pour: ${authData.user_info.display_name}`);
            } else {
              console.log('‚ö†Ô∏è [UserAuth] Donn√©es de session incompl√®tes ou invalides');
              if (isMounted) {
                setUserAuth(null);
                setSessionValid(false);
              }
            }
          } catch (sessionError) {
            console.error('‚ùå [UserAuth] Erreur r√©cup√©ration session:', sessionError);
            if (isMounted) {
              setUserAuth(null);
              setSessionValid(false);
              // Ne pas afficher l'erreur √† l'utilisateur pour l'init
            }
          }
        } else {
          console.log('‚ùå [UserAuth] Aucune session valide trouv√©e');
          if (isMounted) {
            setUserAuth(null);
            setSessionValid(false);
          }
        }

      } catch (error) {
        console.error('‚ùå [UserAuth] Erreur v√©rification statut:', error);
        if (isMounted) {
          setUserAuth(null);
          setSessionValid(false);
          // Ne pas afficher l'erreur √† l'utilisateur pour l'init
        }
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };

    checkAuthStatus();

    return () => {
      isMounted = false;
    };
  }, []); // D√©pendances vides pour n'ex√©cuter qu'une fois

  // üîë Fonction de connexion avec gestion d'erreurs am√©lior√©e
  const login = useCallback(async (username: string, password: string, db: string = 'odoo'): Promise<boolean> => {
    try {
      setIsLoading(true);
      setError(null);
      console.log(`üîê [UserAuth] Tentative de connexion pour: ${username}`);

      // ‚úÖ CORRECTION: Validation des param√®tres
      if (!username.trim() || !password.trim()) {
        throw new Error('Nom d\'utilisateur et mot de passe requis');
      }

      // ‚úÖ CORRECTION: R√©cup√©rer l'URL du serveur configur√©e
      let serverUrl = 'https://ce791a46916a.ngrok-free.app'; // URL par d√©faut
      
      try {
        // Essayer de r√©cup√©rer depuis AsyncStorage la config serveur
        const storedData = await AsyncStorage.getItem('@geo_lambert_server_config');
        if (storedData) {
          const serverConfig = JSON.parse(storedData);
          if (serverConfig.data && serverConfig.data.server_url) {
            serverUrl = serverConfig.data.server_url;
            console.log('üîß [UserAuth] URL serveur r√©cup√©r√©e depuis config:', serverUrl);
          }
        }
      } catch (configError) {
        console.log('üîß [UserAuth] Utilisation URL serveur par d√©faut:', serverUrl);
      }

      // Authentifier via authService avec l'URL du serveur
      const authData = await authService.authenticate({
        username: username.trim(),
        password,
        db,
        server_url: serverUrl
      });

      if (authData.success && authData.user_info) {
        // ‚úÖ CORRECTION: S'assurer que les credentials sont ajout√©es
        const completeAuthData = {
          ...authData,
          CREDENTIALS: authData.CREDENTIALS || { username, password }
        };
        
        // Mettre √† jour l'√©tat global
        const userData: UserAuthData = {
          success: completeAuthData.success,
          user_info: completeAuthData.user_info,
          CREDENTIALS: { username, password },
          db,
          timestamp: Date.now(),
          isAuthenticated: true
        };

        setUserAuth(userData);
        setSessionValid(true);
        
        console.log(`‚úÖ [UserAuth] Connexion r√©ussie: ${completeAuthData.user_info.display_name}`);
        return true;
      } else {
        const errorMsg = authData.message || 'Identifiants incorrects';
        setError(errorMsg);
        console.log('‚ùå [UserAuth] Connexion √©chou√©e:', errorMsg);
        return false;
      }
      
    } catch (error) {
      handleError(error, 'Connexion');
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [handleError]);

  // üö™ Fonction de d√©connexion avec gestion d'erreurs
  const logout = useCallback(async (): Promise<void> => {
    try {
      setIsLoading(true);
      setError(null);
      console.log('üö™ [UserAuth] D√©connexion en cours...');
      
      // D√©connecter via authService
      await authService.logout();

      // Nettoyer l'√©tat global
      setUserAuth(null);
      setSessionValid(false);
      
      console.log('‚úÖ [UserAuth] D√©connexion termin√©e');
      
    } catch (error) {
      handleError(error, 'D√©connexion');
      // Forcer la d√©connexion m√™me en cas d'erreur
      setUserAuth(null);
      setSessionValid(false);
    } finally {
      setIsLoading(false);
    }
  }, [handleError]);

  // üîÑ Rafra√Æchir la session avec gestion d'erreurs
  const refreshSession = useCallback(async (): Promise<void> => {
    try {
      console.log('üîÑ [UserAuth] Rafra√Æchissement de la session...');
      setError(null);

      // Mettre √† jour le timestamp local
      if (userAuth) {
        setUserAuth(prev => prev ? {
          ...prev,
          timestamp: Date.now()
        } : null);
      }
      
      console.log('‚úÖ [UserAuth] Session rafra√Æchie');
      
    } catch (error) {
      handleError(error, 'Rafra√Æchissement session');
    }
  }, [userAuth, handleError]);

  // üë§ R√©cup√©rer l'utilisateur actuel
  const getCurrentUser = useCallback((): AuthUser | null => {
    return userAuth?.user_info || null;
  }, [userAuth]);

  // üóù R√©cup√©rer les credentials
  const getCredentials = useCallback((): { username: string; password: string; db: string } | null => {
    if (userAuth && userAuth.CREDENTIALS) {
      return {
        username: userAuth.CREDENTIALS.username,
        password: userAuth.CREDENTIALS.password,
        db: userAuth.db
      };
    }
    return null;
  }, [userAuth]);

  // ‚úÖ CORRECTION: Utiliser useMemo pour les valeurs calcul√©es
  const isAuthenticated = React.useMemo(() => {
    return !!userAuth?.isAuthenticated && !!userAuth?.CREDENTIALS;
  }, [userAuth]);

  // üìä Valeurs du contexte avec useMemo pour optimiser les performances
  const contextValue = React.useMemo((): UserAuthContextType => ({
    userAuth,
    isAuthenticated,
    isLoading,
    sessionValid,
    error,
    
    // Actions
    login,
    logout,
    refreshSession,
    clearError,
    
    // Getters
    getCurrentUser,
    getCredentials,
  }), [
    userAuth,
    isAuthenticated,
    isLoading,
    sessionValid,
    error,
    login,
    logout,
    refreshSession,
    clearError,
    getCurrentUser,
    getCredentials,
  ]);

  return (
    <UserAuthContext.Provider value={contextValue}>
      {children}
    </UserAuthContext.Provider>
  );
}

// ==================== HOOK PERSONNALIS√â ====================

export function useUserAuth() {
  const context = useContext(UserAuthContext);
  if (context === undefined) {
    throw new Error('useUserAuth doit √™tre utilis√© dans un UserAuthProvider');
  }
  return context;
}

// ==================== HOOKS UTILITAIRES ====================

/**
 * Hook pour r√©cup√©rer seulement l'utilisateur
 */
export function useCurrentUser(): AuthUser | null {
  const { getCurrentUser } = useUserAuth();
  return getCurrentUser();
}

/**
 * Hook pour r√©cup√©rer seulement les credentials
 */
export function useCredentials() {
  const { getCredentials } = useUserAuth();
  return getCredentials();
}

/**
 * Hook pour v√©rifier si l'utilisateur est connect√©
 */
export function useIsAuthenticated(): boolean {
  const { isAuthenticated } = useUserAuth();
  return isAuthenticated;
}

/**
 * Hook pour les actions d'authentification
 */
export function useAuthActions() {
  const { login, logout, refreshSession } = useUserAuth();
  return { login, logout, refreshSession };
}

/**
 * ‚úÖ NOUVEAU: Hook pour la gestion des erreurs
 */
export function useAuthError() {
  const { error, clearError } = useUserAuth();
  return { error, clearError };
}

// ==================== COMPOSANT HOC ====================

/**
 * HOC pour prot√©ger des routes (n√©cessite authentification)
 * ‚úÖ CORRECTION: Gestion am√©lior√©e avec loading et erreurs
 */
export function withAuth<T extends object>(WrappedComponent: React.ComponentType<T>) {
  return function AuthenticatedComponent(props: T) {
    const { isAuthenticated, isLoading, error } = useUserAuth();
    
    if (isLoading) {
      return (
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <div>V√©rification de l&#39;authentification...</div>
        </div>
      );
    }
    
    if (error) {
      return (
        <div style={{ padding: '20px', textAlign: 'center', color: 'red' }}>
          <div>Erreur d&#39;authentification: {error}</div>
        </div>
      );
    }
    
    if (!isAuthenticated) {
      return (
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <div>Acc√®s non autoris√© - Veuillez vous connecter</div>
        </div>
      );
    }
    
    return <WrappedComponent {...props} />;
  };
}

export type { UserAuthData, UserAuthContextType };
